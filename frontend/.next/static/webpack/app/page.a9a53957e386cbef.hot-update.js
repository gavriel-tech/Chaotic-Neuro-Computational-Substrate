"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/stores/backendData.ts":
/*!***********************************!*\
  !*** ./lib/stores/backendData.ts ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useBackendDataStore: function() { return /* binding */ useBackendDataStore; }\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/./node_modules/zustand/esm/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\nvar _process_env_NEXT_PUBLIC_API_URL;\nconst API_BASE = (_process_env_NEXT_PUBLIC_API_URL = process.env.NEXT_PUBLIC_API_URL) !== null && _process_env_NEXT_PUBLIC_API_URL !== void 0 ? _process_env_NEXT_PUBLIC_API_URL : \"http://localhost:8000\";\nconst parsePollMs = (value, fallback)=>{\n    const parsed = Number(value);\n    return Number.isFinite(parsed) && parsed > 0 ? parsed : fallback;\n};\nconst POLL_INTERVAL_MS = parsePollMs(process.env.NEXT_PUBLIC_STATUS_POLL_MS, 2000);\nconst REQUEST_TIMEOUT_MS = parsePollMs(process.env.NEXT_PUBLIC_STATUS_REQUEST_TIMEOUT_MS, 4000);\nlet pollTimer = null;\nlet subscriberCount = 0;\nconst useBackendDataStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)((set, get)=>({\n        simulationStatus: null,\n        thrmlEnergy: null,\n        thrmlEnergyTimestamp: null,\n        benchmarks: null,\n        processors: [],\n        lastUpdated: null,\n        statusError: null,\n        thrmlError: null,\n        benchmarkError: null,\n        processorError: null,\n        rateLimited: false,\n        isPolling: false,\n        startPolling: ()=>{\n            subscriberCount += 1;\n            if (pollTimer) return;\n            pollTimer = setInterval(()=>{\n                get().pollOnce().catch(()=>{\n                /* errors handled in state */ });\n            }, POLL_INTERVAL_MS);\n            void get().pollOnce();\n        },\n        stopPolling: ()=>{\n            if (subscriberCount > 0) {\n                subscriberCount -= 1;\n            }\n            if (subscriberCount === 0 && pollTimer) {\n                clearInterval(pollTimer);\n                pollTimer = null;\n            }\n        },\n        pollOnce: async ()=>{\n            if (get().isPolling) {\n                return;\n            }\n            set({\n                isPolling: true\n            });\n            const fetchJson = async (path)=>{\n                const options = {};\n                if (typeof AbortSignal !== \"undefined\" && \"timeout\" in AbortSignal) {\n                    options.signal = AbortSignal.timeout(REQUEST_TIMEOUT_MS);\n                }\n                const response = await fetch(\"\".concat(API_BASE).concat(path), options);\n                if (response.status === 429) {\n                    throw new Error(\"rate_limited\");\n                }\n                if (!response.ok) {\n                    throw new Error(\"\".concat(response.status));\n                }\n                return response.json();\n            };\n            let rateLimited = false;\n            try {\n                try {\n                    const status = await fetchJson(\"/simulation/status\");\n                    set({\n                        simulationStatus: status,\n                        statusError: null,\n                        rateLimited: false\n                    });\n                } catch (error) {\n                    const message = error instanceof Error ? error.message : String(error);\n                    if (message === \"rate_limited\") {\n                        rateLimited = true;\n                        set({\n                            rateLimited: true,\n                            statusError: \"Rate limit exceeded\"\n                        });\n                    } else {\n                        set({\n                            statusError: message\n                        });\n                    }\n                }\n                try {\n                    const energy = await fetchJson(\"/thrml/energy\");\n                    set({\n                        thrmlEnergy: typeof (energy === null || energy === void 0 ? void 0 : energy.energy) === \"number\" ? energy.energy : null,\n                        thrmlEnergyTimestamp: typeof (energy === null || energy === void 0 ? void 0 : energy.timestamp) === \"number\" ? energy.timestamp : null,\n                        thrmlError: null\n                    });\n                } catch (error) {\n                    const message = error instanceof Error ? error.message : String(error);\n                    if (message === \"rate_limited\") {\n                        rateLimited = true;\n                        set({\n                            thrmlError: \"Rate limit exceeded\",\n                            rateLimited: true\n                        });\n                    } else {\n                        set({\n                            thrmlError: message\n                        });\n                    }\n                }\n                try {\n                    const bench = await fetchJson(\"/sampler/benchmarks\");\n                    set({\n                        benchmarks: bench,\n                        benchmarkError: null\n                    });\n                } catch (error) {\n                    const message = error instanceof Error ? error.message : String(error);\n                    if (message === \"rate_limited\") {\n                        rateLimited = true;\n                        set({\n                            benchmarkError: \"Rate limit exceeded\",\n                            rateLimited: true\n                        });\n                    } else {\n                        set({\n                            benchmarkError: message\n                        });\n                    }\n                }\n                try {\n                    const proc = await fetchJson(\"/processor/list\");\n                    const processors = Array.isArray(proc === null || proc === void 0 ? void 0 : proc.processors) ? proc.processors : [];\n                    set({\n                        processors,\n                        processorError: null\n                    });\n                } catch (error) {\n                    const message = error instanceof Error ? error.message : String(error);\n                    if (message === \"rate_limited\") {\n                        rateLimited = true;\n                        set({\n                            processorError: \"Rate limit exceeded\",\n                            rateLimited: true\n                        });\n                    } else {\n                        set({\n                            processorError: message\n                        });\n                    }\n                }\n                if (!rateLimited) {\n                    set({\n                        rateLimited: false\n                    });\n                }\n            } finally{\n                set({\n                    isPolling: false,\n                    lastUpdated: Date.now()\n                });\n            }\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/stores/backendData.ts\n"));

/***/ })

});