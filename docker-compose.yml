version: '3.8'

services:
  # ============================================
  # Backend Service (GMCS Python Server)
  # ============================================
  gmcs-backend:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        PYTHON_VERSION: "3.10"
        CUDA_VERSION: "12.1.0"
        UBUNTU_VERSION: "22.04"
    image: gmcs-backend:latest
    container_name: gmcs-backend
    restart: unless-stopped
    
    ports:
      - "8000:8000"
    
    volumes:
      - gmcs-data:/app/data
      - gmcs-logs:/app/logs
      - gmcs-models:/app/models
      - gmcs-reports:/app/reports
      - gmcs-sessions:/app/saved_sessions
      - gmcs-configs:/app/saved_configs
      # Development mode: mount source code (comment out for production)
      # - ./src:/app/src
    
    environment:
      - JAX_PLATFORMS=gpu
      - XLA_PYTHON_CLIENT_PREALLOCATE=false
      - XLA_PYTHON_CLIENT_ALLOCATOR=platform
      - XLA_PYTHON_CLIENT_MEM_FRACTION=0.75
      - GMCS_HOST=0.0.0.0
      - GMCS_PORT=8000
      - GMCS_LOG_LEVEL=INFO
      - GMCS_AUDIO_ENABLED=false
      - CUDA_VISIBLE_DEVICES=0
      # Database configuration
      - GMCS_DB_URL=sqlite:////app/data/gmcs.db
      # Security
      - GMCS_SECRET_KEY=${GMCS_SECRET_KEY:-change-me-in-production}
      - GMCS_CORS_ORIGINS=${GMCS_CORS_ORIGINS:-http://localhost:3000}
    
    deploy:
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/health\", timeout=5)' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    networks:
      - gmcs-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Frontend Service (Next.js)
  # ============================================
  gmcs-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        NODE_VERSION: "20"
    image: gmcs-frontend:latest
    container_name: gmcs-frontend
    restart: unless-stopped
    
    ports:
      - "3000:3000"
    
    volumes:
      # Development mode: mount source code
      # - ./frontend:/app
      # - /app/node_modules
      # - /app/.next
      - gmcs-frontend-cache:/app/.next
    
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://gmcs-backend:8000
      - NEXT_PUBLIC_WS_URL=ws://gmcs-backend:8000/ws/stream
      - NEXT_TELEMETRY_DISABLED=1
    
    depends_on:
      gmcs-backend:
        condition: service_healthy
    
    networks:
      - gmcs-network
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ============================================
  # Prometheus Monitoring (Optional)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: gmcs-prometheus
    restart: unless-stopped
    
    ports:
      - "9090:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    
    networks:
      - gmcs-network
    
    profiles:
      - monitoring

  # ============================================
  # Grafana Visualization (Optional)
  # ============================================
  grafana:
    image: grafana/grafana:latest
    container_name: gmcs-grafana
    restart: unless-stopped
    
    ports:
      - "3001:3000"
    
    volumes:
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
      - grafana-data:/var/lib/grafana
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3001
    
    depends_on:
      - prometheus
    
    networks:
      - gmcs-network
    
    profiles:
      - monitoring

  # ============================================
  # PostgreSQL Database (Optional - for production)
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: gmcs-postgres
    restart: unless-stopped
    
    ports:
      - "5432:5432"
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
    
    environment:
      - POSTGRES_DB=gmcs
      - POSTGRES_USER=gmcs
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-change-me-in-production}
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U gmcs"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    networks:
      - gmcs-network
    
    profiles:
      - database

  # ============================================
  # Redis Cache (Optional - for session storage)
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: gmcs-redis
    restart: unless-stopped
    
    ports:
      - "6379:6379"
    
    volumes:
      - redis-data:/data
    
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    
    networks:
      - gmcs-network
    
    profiles:
      - cache

networks:
  gmcs-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  gmcs-data:
    driver: local
  gmcs-logs:
    driver: local
  gmcs-models:
    driver: local
  gmcs-reports:
    driver: local
  gmcs-sessions:
    driver: local
  gmcs-configs:
    driver: local
  gmcs-frontend-cache:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
