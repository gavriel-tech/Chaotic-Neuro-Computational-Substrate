name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10', '3.11']
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev libsndfile1-dev
    
    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install portaudio libsndfile
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements-cpu.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
    
    - name: Format check with black
      run: |
        black --check src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports
      continue-on-error: true
    
    - name: Run tests with pytest
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.os }}-py${{ matrix.python-version }}
        path: htmlcov/

  integration-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev libsndfile1-dev
        python -m pip install --upgrade pip
        pip install -r requirements-cpu.txt
        pip install -r requirements-dev.txt
    
    - name: Run integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short
    
    - name: Run API tests
      run: |
        pytest tests/test_api_integration.py -v --tb=short

  preset-validation:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y portaudio19-dev libsndfile1-dev
        python -m pip install --upgrade pip
        pip install -r requirements-cpu.txt
    
    - name: Validate preset files
      run: |
        python -c "
        import json
        import sys
        from pathlib import Path
        
        errors = []
        preset_dir = Path('frontend/presets')
        
        for preset_file in preset_dir.glob('*.json'):
            try:
                with open(preset_file) as f:
                    data = json.load(f)
                
                # Validate required fields
                required = ['id', 'name', 'nodes', 'connections']
                missing = [f for f in required if f not in data]
                if missing:
                    errors.append(f'{preset_file.name}: Missing fields: {missing}')
                
                print(f'✓ {preset_file.name} is valid')
            except Exception as e:
                errors.append(f'{preset_file.name}: {e}')
        
        if errors:
            print('\nErrors found:')
            for err in errors:
                print(f'✗ {err}')
            sys.exit(1)
        else:
            print(f'\n✓ All {len(list(preset_dir.glob(\"*.json\")))} presets are valid')
        "

